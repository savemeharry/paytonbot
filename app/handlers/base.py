import logging
from datetime import datetime
from aiogram import Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import CommandStart, Command
from aiogram.utils.markdown import hbold

from app.utils.db import get_session
from app.services.user import get_or_create_user
from app.services.channel import get_active_channels
from app.services.subscription import get_user_subscriptions

logger = logging.getLogger(__name__)

# Start command handler
# async def cmd_start(message: types.Message): (–ö–û–ú–ú–ï–ù–¢–ò–†–£–ï–ú –°–¢–ê–†–´–ô)
#     """Handle /start command"""
#     logger.info(f"ENTERING cmd_start for user {message.from_user.id}") 
#     user_id = message.from_user.id
#     username = message.from_user.username
# ... (–≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Å—Ç–∞—Ä–æ–≥–æ cmd_start –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω) ...
#     finally:
#         logger.info(f"EXITING cmd_start for user {user_id}")

# –ü–†–û–°–¢–û–ô –¢–ï–°–¢–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö
async def cmd_start(message: types.Message):
    logger.info(f"SIMPLE cmd_start called for user {message.from_user.id}")
    try:
        # Create keyboard with a simple button
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
        )
        
        # Get the bot instance - check multiple ways
        bot_instance = None
        try:
            # Try to get from message
            bot_instance = message.bot
            logger.info(f"[DEBUG] Got bot from message")
        except Exception as e1:
            try:
                # Try to get current bot
                from aiogram import Bot
                bot_instance = Bot.get_current()
                logger.info(f"[DEBUG] Got bot from current")
            except Exception as e2:
                # Use global bot as last resort
                from webhook import bot as global_bot
                bot_instance = global_bot
                logger.info(f"[DEBUG] Using global bot")
        
        # Log bot data keys if available
        if hasattr(bot_instance, 'data'):
            logger.info(f"[DEBUG] Bot data keys: {list(bot_instance.data.keys())}")
        
        # Send the welcome message
        logger.info(f"[DEBUG] About to send message to user {message.from_user.id}")
        result = await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", 
            reply_markup=keyboard
        )
        logger.info(f"[DEBUG] Message sent successfully, message_id: {result.message_id}")
        
    except Exception as e:
        error_msg = f"Error in cmd_start: {e}"
        logger.error(error_msg, exc_info=True)
        
        # Try fallback direct message using the API
        try:
            # Import at top level to avoid circular imports
            import requests
            import os
            
            bot_token = os.getenv("BOT_TOKEN")
            send_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            
            payload = {
                'chat_id': message.from_user.id,
                'text': "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            }
            
            response = requests.post(send_url, json=payload)
            logger.info(f"[DEBUG] Fallback message response: {response.status_code} - {response.text}")
        except Exception as fallback_error:
            logger.error(f"Even fallback failed: {fallback_error}", exc_info=True)

# Help command handler
async def cmd_help(message: types.Message):
    """Handle /help command"""
    help_text = (
        f"{hbold('–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:')}\n\n"
        f"1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è\n"
        f"2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–µ–¥–µ–ª—è, –º–µ—Å—è—Ü –∏ —Ç.–¥.)\n"
        f"3Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ Telegram Stars\n"
        f"4Ô∏è‚É£ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª\n\n"
        f"{hbold('–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:')}\n"
        f"/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        f"/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        f"/mysubscriptions - –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
        f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    
    # Create keyboard
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton(
            text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data="back_to_start"
        )
    )
    
    await message.answer(
        help_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# My subscriptions command handler
async def cmd_my_subscriptions(message: types.Message):
    """Handle /mysubscriptions command"""
    user_id = message.from_user.id
    logger.info(f"[DEBUG] cmd_my_subscriptions for user {user_id}")
    
    try:
        # Create a fresh database connection for this event loop
        import os
        from dotenv import load_dotenv
        from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
        from sqlalchemy.orm import sessionmaker
        
        # Load environment variables if needed
        load_dotenv()
        
        # Get database URL
        db_url = os.getenv("DATABASE_URL", "sqlite+aiosqlite:///bot_database.db")
        logger.info(f"[DEBUG] Creating new DB engine for mysubscriptions with URL: {db_url[:db_url.find(':')]}://...elided...")
        
        # Create new engine and session factory for this event loop
        engine = create_async_engine(db_url, echo=False, pool_timeout=30)
        session_factory = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
        
        # Use the session factory to get user subscriptions
        async with get_session(session_factory) as session:
            # Get user's active subscriptions
            subscriptions = await get_user_subscriptions(session, user_id)
            
            if subscriptions:
                subs_text = f"{hbold('–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:')}\n\n"
                for sub in subscriptions:
                    end_date = sub.end_date.strftime("%d.%m.%Y %H:%M")
                    subs_text += f"üìå {sub.channel.name}\n"
                    subs_text += f"üìÖ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: {end_date}\n"
                    subs_text += f"üí∞ –¢–∞—Ä–∏—Ñ: {sub.tariff.name}\n\n"
            else:
                subs_text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫."
            
            # Create keyboard
            keyboard = InlineKeyboardMarkup()
            keyboard.add(
                InlineKeyboardButton(
                    text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                    callback_data="refresh_subscriptions"
                )
            )
            keyboard.add(
                InlineKeyboardButton(
                    text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="back_to_start"
                )
            )
            
            # Send the response
            await message.answer(
                subs_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            # Clean up resources
            await engine.dispose()
            
    except Exception as e:
        logger.error(f"[DEBUG] Error in cmd_my_subscriptions: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# Callback handler for back to start button
async def callback_back_to_start(callback_query: types.CallbackQuery):
    """Handle back to start button"""
    await callback_query.answer()
    
    # Create a modified message with the correct user_id
    message = callback_query.message
    # Make sure the correct user_id is available
    message.from_user = callback_query.from_user
    
    # Call start command handler with the modified message
    await cmd_start(message)

# Callback handler for help button
async def callback_help(callback_query: types.CallbackQuery):
    """Handle help button"""
    await callback_query.answer()
    
    # Create a modified message with the correct user_id
    message = callback_query.message
    # Make sure the correct user_id is available
    message.from_user = callback_query.from_user
    
    # Call help command handler with the modified message
    await cmd_help(message)

# Make admin command handler
async def cmd_make_admin(message: types.Message):
    """Handle /makeadmin command - make user an admin with password"""
    user_id = message.from_user.id
    logger.info(f"[DEBUG] cmd_make_admin for user {user_id}")
    
    try:
        # Parse command arguments
        try:
            parts = message.text.split()
            if len(parts) < 2:
                logger.info(f"[DEBUG] makeadmin: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {message.text}")
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã.\n"
                    "–§–æ—Ä–º–∞—Ç: /makeadmin –ü–ê–†–û–õ–¨"
                )
                return
            
            password = parts[1]
            logger.info(f"[DEBUG] makeadmin: –ü–æ–ª—É—á–µ–Ω –ø–∞—Ä–æ–ª—å: {password}")
        except ValueError as e:
            logger.info(f"[DEBUG] makeadmin: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã.\n"
                "–§–æ—Ä–º–∞—Ç: /makeadmin –ü–ê–†–û–õ–¨"
            )
            return
        
        # Check password
        admin_password = "301402503"
        if password != admin_password:
            logger.info(f"[DEBUG] makeadmin: –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å: {password}")
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
            return
            
        # Create a fresh database connection for this event loop
        import os
        from dotenv import load_dotenv
        from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
        from sqlalchemy.orm import sessionmaker
        from sqlalchemy import text
        
        # Load environment variables if needed
        load_dotenv()
        
        # Get database URL
        db_url = os.getenv("DATABASE_URL", "sqlite+aiosqlite:///bot_database.db")
        logger.info(f"[DEBUG] Creating new DB engine for makeadmin with URL: {db_url[:db_url.find(':')]}://...elided...")
        
        # Create new engine and session factory for this event loop
        engine = create_async_engine(db_url, echo=False, pool_timeout=30)
        session_factory = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
        
        async with get_session(session_factory) as session:
            # Get user
            from app.models import User
            query = text("SELECT id FROM users WHERE user_id = :user_id")
            logger.info(f"[DEBUG] makeadmin: –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å user_id={user_id}")
            user_query = await session.execute(query, {"user_id": user_id})
            user_id_db = user_query.scalar()
            logger.info(f"[DEBUG] makeadmin: –ü–æ–ª—É—á–µ–Ω id –∏–∑ –±–∞–∑—ã: {user_id_db}")
            
            if not user_id_db:
                logger.info(f"[DEBUG] makeadmin: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
                await engine.dispose()
                return
            
            # Update user to admin
            update_query = text("UPDATE users SET is_admin = true WHERE id = :user_id_db")
            logger.info(f"[DEBUG] makeadmin: –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è id={user_id_db}")
            await session.execute(update_query, {"user_id_db": user_id_db})
            await session.commit()
            logger.info(f"[DEBUG] makeadmin: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
            logger.info(f"[DEBUG] makeadmin: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            await engine.dispose()
            logger.info(f"[DEBUG] makeadmin: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
    
    except Exception as e:
        logger.error(f"[DEBUG] Error in cmd_make_admin: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# Make admin command handler
async def cmd_create_user(message: types.Message):
    """Handle /createuser command - create user in database"""
    user_id = message.from_user.id
    username = message.from_user.username or ""
    first_name = message.from_user.first_name or ""
    last_name = message.from_user.last_name or ""
    
    logger.info(f"[DEBUG] cmd_create_user for user {user_id}, @{username}")
    
    try:
        # Create a fresh database connection for this event loop
        import os
        from dotenv import load_dotenv
        from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
        from sqlalchemy.orm import sessionmaker
        from sqlalchemy import text
        
        # Load environment variables if needed
        load_dotenv()
        
        # Get database URL
        db_url = os.getenv("DATABASE_URL", "sqlite+aiosqlite:///bot_database.db")
        logger.info(f"[DEBUG] Creating new DB engine for createuser with URL: {db_url[:db_url.find(':')]}://...elided...")
        
        # Create new engine and session factory for this event loop
        engine = create_async_engine(db_url, echo=False, pool_timeout=30)
        session_factory = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
        
        async with get_session(session_factory) as session:
            # Check if user already exists
            from app.models import User
            query = text("SELECT id FROM users WHERE user_id = :user_id")
            logger.info(f"[DEBUG] createuser: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å user_id={user_id}")
            user_query = await session.execute(query, {"user_id": user_id})
            user_id_db = user_query.scalar()
            
            if user_id_db:
                logger.info(f"[DEBUG] createuser: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î, id={user_id_db}")
                await message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                await engine.dispose()
                return
            
            # Create user
            admin_ids = os.getenv("ADMIN_IDS", "").split(",")
            is_admin = str(user_id) in admin_ids
            
            logger.info(f"[DEBUG] createuser: ADMIN_IDS={admin_ids}, is_admin={is_admin}")
            
            insert_query = text("""
                INSERT INTO users (user_id, username, first_name, last_name, is_admin, created_at, last_active) 
                VALUES (:user_id, :username, :first_name, :last_name, :is_admin, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
                RETURNING id
            """)
            
            logger.info(f"[DEBUG] createuser: –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={user_id}, is_admin={is_admin}")
            
            result = await session.execute(
                insert_query, 
                {
                    "user_id": user_id,
                    "username": username,
                    "first_name": first_name,
                    "last_name": last_name,
                    "is_admin": is_admin
                }
            )
            new_id = result.scalar()
            await session.commit()
            
            logger.info(f"[DEBUG] createuser: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω, id={new_id}")
            
            # Force additional admin status
            logger.info(f"[DEBUG] createuser: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            update_query = text("UPDATE users SET is_admin = true WHERE id = :user_id_db")
            await session.execute(update_query, {"user_id_db": new_id})
            await session.commit()
            
            logger.info(f"[DEBUG] createuser: –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            
            await message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            await engine.dispose()
    
    except Exception as e:
        logger.error(f"[DEBUG] Error in cmd_create_user: {e}", exc_info=True)
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# Register base handlers
def register_base_handlers(dp: Dispatcher):
    """Register all base handlers"""
    logger.info("Registering base handlers...")
    dp.register_message_handler(cmd_start, CommandStart())
    logger.info(f"Registered cmd_start for CommandStart filter.")
    dp.register_message_handler(cmd_help, Command("help"))
    logger.info(f"Registered cmd_help for Command('help') filter.")
    dp.register_message_handler(cmd_my_subscriptions, Command("mysubscriptions"))
    logger.info(f"Registered cmd_my_subscriptions for Command('mysubscriptions') filter.")
    dp.register_message_handler(cmd_make_admin, Command("makeadmin"))
    logger.info(f"Registered cmd_make_admin for Command('makeadmin') filter.")
    dp.register_message_handler(cmd_create_user, Command("createuser"))
    logger.info(f"Registered cmd_create_user for Command('createuser') filter.")
    
    dp.register_callback_query_handler(callback_back_to_start, lambda c: c.data == "back_to_start")
    logger.info(f"Registered callback_back_to_start.")
    dp.register_callback_query_handler(callback_help, lambda c: c.data == "help") 
    logger.info(f"Registered callback_help.")
    logger.info("Base handlers registration finished.") 