import logging
from datetime import datetime
from aiogram import Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import CommandStart, Command
from aiogram.utils.markdown import hbold

from app.utils.db import get_session
from app.services.user import get_or_create_user
from app.services.channel import get_active_channels
from app.services.subscription import get_user_subscriptions

logger = logging.getLogger(__name__)

# Start command handler
async def cmd_start(message: types.Message):
    """Handle /start command"""
    logger.info(f"ENTERING cmd_start for user {message.from_user.id}")
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    # Get session factory from dispatcher's data
    session_factory = message.bot.get("session_factory")
    logger.info(f"User {user_id}: Got session_factory: {session_factory}")
    
    if not session_factory:
        logger.error(f"User {user_id}: session_factory not found in bot context!")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    try:
        logger.info(f"User {user_id}: Attempting to get DB session...")
        async with get_session(session_factory) as session:
            logger.info(f"User {user_id}: DB session obtained: {session}")
            # Get or create user
            logger.info(f"User {user_id}: Getting or creating user...")
            user = await get_or_create_user(
                session, 
                user_id, 
                username, 
                first_name, 
                last_name
            )
            logger.info(f"User {user_id}: User object: {user}")
            
            # Get active channels
            logger.info(f"User {user_id}: Getting active channels...")
            channels = await get_active_channels(session)
            logger.info(f"User {user_id}: Active channels: {channels}")
            
            # Get user's active subscriptions
            logger.info(f"User {user_id}: Getting user subscriptions...")
            subscriptions = await get_user_subscriptions(session, user_id)
            logger.info(f"User {user_id}: User subscriptions: {subscriptions}")
            
            logger.info(f"User {user_id}: Formatting message...")
            # Generate welcome message based on subscription status
            welcome_text = f"üëã {hbold('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å')}, {user.first_name or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n\n"
            
            if subscriptions:
                welcome_text += f"{hbold('–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:')}\n"
                for sub in subscriptions:
                    welcome_text += f"üìå {sub.channel.name} - –¥–æ {sub.end_date.strftime('%d.%m.%Y %H:%M')}\n"
                welcome_text += "\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–µ:"
            else:
                welcome_text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:"
            
            # Create inline keyboard with channels
            keyboard = InlineKeyboardMarkup(row_width=1)
            
            if channels:
                for channel in channels:
                    keyboard.add(
                        InlineKeyboardButton(
                            text=f"üì∫ {channel.name}", 
                            callback_data=f"channel:{channel.id}"
                        )
                    )
            else:
                welcome_text += "\n\n‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏."
            
            # Add help button
            keyboard.add(
                InlineKeyboardButton(
                    text="‚ÑπÔ∏è –ü–æ–º–æ—â—å",
                    callback_data="help"
                )
            )
            
            # Send welcome message with keyboard
            logger.info(f"User {user_id}: Sending message...")
            await message.answer(
                welcome_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            logger.info(f"User {user_id}: Message sent successfully.")
    except Exception as e:
        logger.error(f"User {user_id}: Error in cmd_start: {e}", exc_info=True)
        try:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as send_error:
             logger.error(f"User {user_id}: Failed to send error message: {send_error}", exc_info=True)
    finally:
        logger.info(f"EXITING cmd_start for user {user_id}")

# Help command handler
async def cmd_help(message: types.Message):
    """Handle /help command"""
    help_text = (
        f"{hbold('–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:')}\n\n"
        f"1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è\n"
        f"2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–µ–¥–µ–ª—è, –º–µ—Å—è—Ü –∏ —Ç.–¥.)\n"
        f"3Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ Telegram Stars\n"
        f"4Ô∏è‚É£ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª\n\n"
        f"{hbold('–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:')}\n"
        f"/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        f"/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        f"/mysubscriptions - –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
        f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    
    # Create keyboard
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton(
            text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data="back_to_start"
        )
    )
    
    await message.answer(
        help_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# My subscriptions command handler
async def cmd_my_subscriptions(message: types.Message):
    """Handle /mysubscriptions command"""
    user_id = message.from_user.id
    session_factory = message.bot.get("session_factory")
    
    async with get_session(session_factory) as session:
        # Get user's active subscriptions
        subscriptions = await get_user_subscriptions(session, user_id)
        
        if subscriptions:
            subs_text = f"{hbold('–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:')}\n\n"
            for sub in subscriptions:
                end_date = sub.end_date.strftime("%d.%m.%Y %H:%M")
                subs_text += f"üìå {sub.channel.name}\n"
                subs_text += f"üìÖ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: {end_date}\n"
                subs_text += f"üí∞ –¢–∞—Ä–∏—Ñ: {sub.tariff.name}\n\n"
        else:
            subs_text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫."
        
        # Create keyboard
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                callback_data="refresh_subscriptions"
            )
        )
        keyboard.add(
            InlineKeyboardButton(
                text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="back_to_start"
            )
        )
        
        await message.answer(
            subs_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

# Callback handler for back to start button
async def callback_back_to_start(callback_query: types.CallbackQuery):
    """Handle back to start button"""
    await callback_query.answer()
    
    # Call start command handler with the same message
    await cmd_start(callback_query.message)

# Callback handler for help button
async def callback_help(callback_query: types.CallbackQuery):
    """Handle help button"""
    await callback_query.answer()
    
    # Call help command handler with the same message
    await cmd_help(callback_query.message)

# Register base handlers
def register_base_handlers(dp: Dispatcher):
    """Register all base handlers"""
    dp.register_message_handler(cmd_start, CommandStart())
    dp.register_message_handler(cmd_help, Command("help"))
    dp.register_message_handler(cmd_my_subscriptions, Command("mysubscriptions"))
    
    dp.register_callback_query_handler(callback_back_to_start, lambda c: c.data == "back_to_start")
    dp.register_callback_query_handler(callback_help, lambda c: c.data == "help") 